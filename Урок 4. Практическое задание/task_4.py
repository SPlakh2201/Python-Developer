from timeit import timeit


"""
Задание 4.
Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.
Сделайте профилировку каждого алгоритма через timeit
Обязательно напишите третью версию (здесь возможно даже решение одной строкой).
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
"""

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    new_dict = {}
    for digit in array:
        if digit in new_dict:
            new_dict[digit] += 1
        else:
            new_dict.setdefault(digit, 1)
    v = list(new_dict.values())
    k = list(new_dict.keys())
    ind = v.index(max(v))
    return f'Чаще всего встречается число {k[ind]}, оно появилось в массиве {v[ind]} раз(а)'


def func_4():
    return sorted([f'Чаще всего встречается число {i}, оно появилось в массиве {array.count(i)} раз(а)' for i in set(array)],key=lambda t:t[1])[0]

    
print(timeit("func_1()", globals=globals()))
print(timeit("func_2()", globals=globals()))
print(timeit("func_3()", globals=globals()))
print(timeit("func_4()", globals=globals()))

"""
Алгоритм func_4() реализован через сортировку списка в одну строку, используя генератор, однако он не является экономным по времени. 
Менее затратным по времени вариантом будет решение через словарь, где каждому значению при совпадении элемента массива с ключом будет прибавляться 1.
Данное решение может показаться более затратным в сравнении с исходными 2-мя алгоритмами:

array = [1, 3, 1, 3, 4, 5, 1]
2.7439793
4.0499578
3.9431647000000005
5.7425112999999985

Однако, если увеличить количество данных, то можно увидеть иную картину:

array = [1, 3, 1, 3, 4, 5, 1, 1, 3, 1, 3, 4, 5, 1, 1]
6.5810417999999995
8.5665438
5.177896100000002
6.397044900000001

Вывод: При работе с большим кол-вом данных лучше использовать алгоритм со словарём
"""
